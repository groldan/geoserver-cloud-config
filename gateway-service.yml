# Default georchestra gateway specific configuration, always imported from application.yml
# configure target base URL's, headers and role based access, per service name.
# Replaces security-proxy's targets-mapping.properties, headers-mapping.properties, and security-mappings.xml
#
geoserver.base-path: ${geoserver_base_path:/geoserver}

targets:
  acl: http://acl:8080
  wfs: http://wfs:8080
  wms: http://wms:8080
  wcs: http://wcs:8080
  rest: http://rest:8080
  gwc: http://gwc:8080
  webui: http://webui:8080

info:
  component: Gateway Server
  instance-id: ${spring.application.name}:${spring.application.instance_id:${spring.cloud.client.ip-address}}:${server.port}
server:
  port: 8080
  compression.enabled: true

spring:
  main.banner-mode: off
  application.name: gateway-service
  autoconfigure.exclude:
    - org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration
  cloud:
    gateway:
      enabled: true
      global-filter.websocket-routing.enabled: true
      metrics.enabled: true
      default-filters:
      - SecureHeaders
      - TokenRelay
      - RemoveHeaders=(?i)(sec-.*)
      # AddSecHeaders appends sec-* headers to proxied requests based on the
      - AddSecHeaders
      filter:
        secure-headers:
          enabled: true
          disable:
          - content-security-policy
          frame-options: SAMEORIGIN
          xss-protection-header: 0
          referrer-policy: strict-origin-when-cross-origin
      globalcors:
        cors-configurations:
          "[/**]":
            allowedOrigins: "*"
            allowedMethods: GET, PUT, POST, DELETE, OPTIONS, HEAD
      routes:
      - id: root
        uri: no://op
        predicates:
        - Path=/,${geoserver.base-path}
        filters:
        - RedirectTo=302, ${geoserver.base-path}/web
      - id: acl
        uri: ${targets.acl}/acl
        predicates:
        - Path=/acl/**

      - id: gscloud-form-login-redirect
        uri: ${targets.webui}
        predicates:
        - Path=${geoserver.base-path}/j_spring_security_check
        filters:
        - RewritePath=/${geoserver.base-path}/j_spring_security_check,/${geoserver.base-path}/web/j_spring_security_check
        - StripBasePath=${geoserver.base-path}
     
      - id: gscloud-logout-redirect
        uri: no://op
        predicates:
        - Path=${geoserver.base-path}/j_spring_security_logout
        filters:
        - RedirectTo=302, ${geoserver.base-path}/web/j_spring_security_logout

      - id: gateway-login-redirect
        uri: no://op
        predicates:
        - Path=${geoserver.base-path}/login
        filters:
        - RedirectTo=302, /login

      - id: gateway-logout-redirect
        uri: no://op
        predicates:
        - Path=${geoserver.base-path}/logout
        filters:
        - RedirectTo=302, /logout

      # WMS service
      - id: wms # proxies requests to gateway-service:/wms to wms-service:/wms
        uri: ${targets.wms}
        predicates:
          - Path=${geoserver.base-path}/wms,${geoserver.base-path}/{workspace}/wms,${geoserver.base-path}/{workspace}/{layer}/wms,${geoserver.base-path}/schemas/wms/**,${geoserver.base-path}/openlayers/**,${geoserver.base-path}/openlayers3/**
        filters: ['StripBasePath=${geoserver.base-path}']
      - id: wms_ows # proxy [/{workspace}]/ows?SERVICE=wms to wms-service:[/{workspace}]/ows?SERVICE=wms. Param value is case insensitive, name is not.
        uri: ${targets.wms}
        predicates:
          - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
          - RegExpQuery=(?i:service),(?i:wms) # match service=wms case insensitively
        filters: ['StripBasePath=${geoserver.base-path}']
      - id: kml # proxies requests to kml endpoints to the wms service
        uri: ${targets.wms}
        predicates:
          - Path=${geoserver.base-path}/wms/kml,${geoserver.base-path}/{workspace}/wms/kml,${geoserver.base-path}/kml/icon/**
        filters: ['StripBasePath=${geoserver.base-path}']
      # WFS service
      - id: wfs # proxies requests to gateway-service:/wfs to wfs-service:/wfs
        uri: ${targets.wfs}
        predicates:
          - Path=${geoserver.base-path}/wfs,${geoserver.base-path}/{workspace}/wfs,${geoserver.base-path}/{workspace}/{layer}/wfs,${geoserver.base-path}/schemas/wfs/**
        filters: ['StripBasePath=${geoserver.base-path}']
      # proxy [/{workspace}]/ows?SERVICE=wfs to wfs-service:[/{workspace}]/ows?SERVICE=wfs. Param value is case insensitive, name is not.
      - id: wfs_ows
        uri: ${targets.wfs}
        predicates:
          - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
          - RegExpQuery=(?i:service),(?i:wfs) # match service=wfs case insensitively
        filters: ['StripBasePath=${geoserver.base-path}']
      # WCS service
      - id: wcs # proxies requests to gateway-service:/wcs to wcs-service:/wcs
        uri: ${targets.wcs}
        predicates:
          - Path=${geoserver.base-path}/wcs,${geoserver.base-path}/{workspace}/wcs,${geoserver.base-path}/{workspace}/{layer}/wcs,${geoserver.base-path}/schemas/wcs/**
      - id: wcs_ows # proxy [/{workspace}]/ows?SERVICE=wcs to wcs-service:[/{workspace}]/ows?SERVICE=wcs. Param value is case insensitive, name is not.
        uri: ${targets.wcs}
        predicates:
          - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
          - RegExpQuery=(?i:service),(?i:wcs) # match service=wcs case insensitively
        filters: ['StripBasePath=${geoserver.base-path}']
      # REST service
      - id: restconfig
        uri: ${targets.rest}
        predicates:
          - Path=${geoserver.base-path}/rest/**
        filters: ['StripBasePath=${geoserver.base-path}']
      # GeoWebcache service
      - id: gwc
        uri: ${targets.gwc}
        predicates:
          - Path=${geoserver.base-path}/gwc/**,${geoserver.base-path}/{workspace}/gwc/**,${geoserver.base-path}/{workspace}/{layer}/gwc/**
        filters: ['StripBasePath=${geoserver.base-path}']
      # Web UI service
      - id: webui
        uri: ${targets.webui}
        predicates:
          - Path=${geoserver.base-path}/web/**
        filters: ['StripBasePath=${geoserver.base-path}']

georchestra:
  gateway:
    default-headers:
      # Default security headers to append to proxied requests
      proxy: false
      username: true
      roles: false
      org: false
      orgname: false
      email: false
    global-access-rules:
    - intercept-url:
      - /**
      anonymous: true

logging:
  level:
    root: info
    org.springframework: info
    org.georchestra.gateway: info
    org.georchestra.gateway.filter.headers: debug

---
spring.config.activate.on-profile: authgoogle
georchestra.gateway.security.oauth2.enabled: true
spring:
  security:
    oauth2:
      client:
        # google is a well known embedded OAuth2/OpenID Connect compliant provider
        registration:
          google:
            clientId: ${GOOGLE_CLIENT_ID}
            clientSecret: ${GOOGLE_CLIENT_SECRET}
            scope: openid, email, profile, address, phone
            # profile, picture, website, gender, birthdate, zoneinfo, locale, updated_at.
            # The phone scope requests access to the phone_number and  phone_number_verified claims.
            # name, family_name, given_name, middle_name, nickname, preferred_username,
---
spring.config.activate.on-profile: authgithub
georchestra.gateway.security.oauth2.enabled: true
spring:
  security:
    oauth2:
      client:
        # github is a well known embedded OAuth2 provider.
        registration:
          github:
            clientId: ${GITHUB_CLIENT_ID}
            clientSecret: ${GITHUB_CLIENT_SECRET}

---
spring.config.activate.on-profile: authkeycloak
georchestra.gateway.security.oauth2.enabled: true
spring:
  security:
    oauth2:
      client:
        #google and github are well known embedded OAuth2 providers. Google's is also OpenID Connect compliant
        registration:
          # To set up your own OAuth2/OIDC registratgion (e.g. for keycloak), define a
          # client registration there and a provider as shown below (both named keycloak in this example)
          keycloak:
            client-name: keycloak
            client-id: ${KEYCLOAK_CLIENT_ID}
            client-secret: ${KEYCLOAK_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/keycloak"
            scope: openid
        provider:
          icu:
            issuer-uri: https://keycloak-test-login.org/auth/realms/keycloak-customer-k2
            userNameAttribute: preferred_username

---
# local profile, used for development only. Other settings like config and eureka urls in gs_cloud_bootstrap_profiles.yml
spring.config.activate.on-profile: local

targets:
  acl: http://172.17.0.1:9000
  wfs: http://172.17.0.1:9101
  wms: http://172.17.0.1:9102
  wcs: http://172.17.0.1:9103
  rest: http://172.17.0.1:9105
  gwc: http://172.17.0.1:9107
  webui: http://172.17.0.1:9106
