# shared application config for geoserver-cloud v1.0-SNAPSHOT
server:
  tomcat:
    # Maximum number of connections that the server accepts and processes at any given time.
    # Once the limit has been reached, the operating system may still accept connections based on the "acceptCount" property.
    max-connections: 1000 # default: 8192
    # Maximum queue length for incoming connection requests when all possible request processing threads are in use.
    accept-count: 100 # default: 100
    accesslog:
      enabled: false
      directory: logs
      encoding: UTF-8
    threads:
      # Minimum amount of worker threads.
      min-spare: 2 #default: 10
      # Maximum amount of worker threads.
      max: 20 #default: 200

# Common configuration for all services. Override or add service specific config
# properties on each <service-name>-service.yml file

# GeoTools HTTP Client proxy configuration, allows configuring cascaded WMS/WMTS/WFS stores
# that need to go through an HTTP proxy without affecting all the http clients at the JVM level
# These are default settings. The enabled property can be set to false to disable the custom
# HTTPClientFactory altogether.
# The following OS environment variables can be set for easier configuration:
# HTTP(S)_PROXYHOST, HTTP(S)_PROXYPORT, HTTP(S)_PROXYUSER, HTTP(S)_PROXYPASSWORD, HTTP(S)_NONPROXYHOSTS
geotools:
  httpclient:
    proxy:
      enabled: true
      http:
        host: ${http.proxyHost:}
        port: ${http.proxyPort:}
        user: ${http.proxyUser:}
        password: ${http.proxyPassword:}
        nonProxyHosts: ${http.nonProxyHosts:localhost.*}
        # comma separated list of Java regular expressions, e.g.: nonProxyHosts: localhost, example.*
      https:
        host: ${https.proxyHost:${geotools.httpclient.proxy.http.host}}
        port: ${https.proxyPort:${geotools.httpclient.proxy.http.port}}
        user: ${https.proxyUser:${geotools.httpclient.proxy.http.user}}
        password: ${https.proxyPassword:${geotools.httpclient.proxy.http.password}}
        nonProxyHosts: ${https.nonProxyHosts:${geotools.httpclient.proxy.http.nonProxyHosts}}

gwc:
  enabled: true
  # cache-directory is mandatory, there's no default value like in upstream GeoServer,
  # it can be set to the datadir's /gwc with ${geoserver.backend.data-directory.location}/gwc
  # if using the data-directory catalog backend, but in general it's better to separate config,
  # from data, hence the webui and gwc Docker images are prepared for a shared volume at /data/geowebcache
  cache-directory: ${GEOWEBCACHE_CACHE_DIR:/data/geowebcache}
  # directory where geowebcache.xml is located, if unset defaults to the resource store's /gwc directory usual in GeoServer
  config-directory: ${GEOWEBCACHE_CONFIG_DIR:}
  rest-config: true
  web-ui: true
  services:
    wmts: true
    tms: true
    wms: true
    kml: true
    gmaps: true
    mgmaps: true

# GeoServer-Cloud common config properties
geoserver:
  security.enabled: true
  servlet.filter.session-debug.enabled: false # until the NPE is fixed
  catalog:
    advertised: true
    localWorkspace: true
    secure: true
    # enable caching if using the catalog-service as backend
    caching.enabled: ${geoserver.backend.catalog-service.enabled}
  bus:
    # whether to send distributed events (i.e. acts as master). All instances receive remote events.
    send-events: true
    # whether to send the object (CatalogInfo/config info) as payload with the event. Set to false, 
    # not all possible payload types are properly tested, and full object payload is not needed.
    send-object: ${geoserver.backend.data-directory.enabled}
    # whether to send a diff of changes as payload with the event. Set to false, not all possible payload types are properly tested nor needed.
    send-diff: ${geoserver.backend.data-directory.enabled}
  backend:
    # configure catalog backends and decide which backend to use on this service.
    # All backends are disabled, enable the required one on each service. For example, the catalog microservice 
    # will enable one backend type, and the front services the catalog-service backend.
    # revisit: Could be split into profiles
    catalog-service:
      enabled: ${backend.catalog:false}
      # Base URI of the catalog service. If not set, will be automatically determined using the discovery service, looking for "catalog-service"
      # This allows to explicitly set a fixed location for the catalog service.
      # uri: http://catalog:8080
      cache-directory: ${java.io.tmpdir}/cngs/catalog-client/resource_store
      fallback-resource-directory: ${java.io.tmpdir}/cngs/catalog-client/fallback_resource_store
    data-directory:
      enabled: ${backend.data-directory:false}
      location: ${GEOSERVER_DATA_DIR:/opt/app/data_directory} 
    jdbcconfig:
      enabled: ${backend.jdbcconfig:false}
      initdb: true
      web.enabled: true
      cache-directory: ${jdbcconfig.cachedir:${java.io.tmpdir}/cngs/jdbcconfig/cache}
      datasource:
        url: ${jdbcconfig.url:jdbc:postgresql://database:5432/geoserver_config}
        username: ${jdbcconfig.username:geoserver}
        password: ${jdbcconfig.password:geo5erver}
        driverClassname: ${jdbcconfig.driverClassname:org.postgresql.Driver}
        # optional:
        minimumIdle: ${jdbcconfig.minConnections:2}
        maximumPoolSize: ${jdbcconfig.maxConnections:8}
  styling:
    css.enabled: true
  wms:
    output-formats:
      vector-tiles:
        mapbox.enabled: true
        geojson.enabled: true
        topojson.enabled: true

management:
  endpoints:
    enabled-by-default: true
    web.exposure.include: "*"
  endpoint:
    info.enabled: true
    metrics.enabled: true
    shutdown.enabled: true
    health:
      enabled: true
      show-details: always
  metrics:
    binders:
      processor.enabled: true
      uptime.enabled: true
      jvm.enabled: true
    enable.all: true
    enable.jvm: true
    export:
      atlas.enabled: false

spring:
  rabbitmq:
    host: ${rabbitmq.host:rabbitmq}
    port: ${rabbitmq.port:5672}
    username: ${rabbitmq.user:guest}
    password: ${rabbitmq.password:guest}
  cloud:
    bus:
      enabled: true
      id: ${info.instance-id} # use the same instance id for eureka (see service's' bootstrap.yml) and cloud-bus' rabbitmq instance id
      trace.enabled: false #switch on tracing of acks (default off).
    stream:
      bindings:
        springCloudBusOutput:
          destination: gscatalog
        springCloudBusInput:
          destination: gscatalog
  jackson:
    default-property-inclusion: non-empty
    serialization.indent-output: false #set to true if doing manual testing and want formatted output

reactive.feign.cloud.enabled: true
reactive.feign.hystrix.enabled: false

# Should only be set in application.yml. Setting the value in bootstrap.yml will cause undesirable side effects like registering in eureka with an UNKNOWN status.
# See https://cloud.spring.io/spring-cloud-netflix/2.0.x/multi/multi__service_discovery_eureka_clients.html#_eureka_s_health_checks
eureka.client.healthcheck.enabled: true

logging:
  level:
    root: warn
    org.springframework: error
    org.springframework.cloud.bus: info
    org.springframework.retry: info
    org.springframework.jdbc.support: info
    com.zaxxer.hikari.pool: OFF
    org.geotools.autoconfigure: info
    # geoserver roots
    org.geoserver: info
    org.geoserver.catalog.plugin: info
    org.geoserver.wms: warn #don't flood the logs with every request details
    org.geoserver.wfs: warn
    org.geoserver.jackson: info
    org.geotools.jackson: info
    org.geoserver.platform: info
    org.geoserver.platform.resource: info
    org.geoserver.jdbcconfig: info
    oshi.hardware.platform.linux: error
    oshi.software.os: error
    # gs-cloud roots
    org.geoserver.cloud: info
    org.geoserver.cloud.autoconfigure: info
    org.geoserver.cloud.config.factory: info
    # bus debugging
    org.geoserver.cloud.bus: info
    org.springframework.cloud.bus.BusAutoConfiguration: info
    org.springframework.cloud.bus.DefaultBusPathMatcher: info
    # reactivefeign:
    reactivefeign.client.log: info
    org.springframework.cloud.config.server.environment.NativeEnvironmentRepository: warn

---
spring.config.activate.on-profile: local
# Profile used for local development, so an app launched from the IDE can participate in the cluster.
# providing environment variables that otherwise would be given by docker-compose.yml
# It is safe to remove this profile completely in a production deployment config.
# Additionally, each service's bootstrap.yml must set the following properties in the "local" profile:
# eureka.server.url: http://localhost:8761/eureka, server.port, and management.server.port if it ought to differ from server.port
rabbitmq.host: localhost
jdbcconfig.url: jdbc:postgresql://localhost:5432/geoserver_config
jdbcconfig.username: geoserver
jdbcconfig.password: geo5erver
---
spring.config.activate.on-profile: datadir
backend.jdbcconfig: false
backend.catalog: false
backend.data-directory: true
---
spring.config.activate.on-profile: jdbcconfig
backend.jdbcconfig: true
backend.catalog: false
backend.data-directory: false
---
spring.config.activate.on-profile: catalog
backend.catalog: true
backend.jdbcconfig: false
backend.data-directory: false
---
spring.config.activate.on-profile: debug

logging:
  level:
    root: warn
    org.springframework: info
    # geoserver roots
    org.geoserver: info
    org.geoserver.catalog.plugin: debug
    org.geoserver.wms: info
    org.geoserver.wfs: info
    org.geoserver.jackson: debug
    org.geotools.jackson: debug
    org.geoserver.platform: error
    org.geoserver.platform.resource.MemoryLockProvider: info
    org.geoserver.platform.resource.NioFileLockProvider: debug
    org.geoserver.platform.resource.FileLockProvider: debug
    org.geoserver.jdbcconfig: info
    # gs-cloud roots
    org.geoserver.cloud: info
    org.geoserver.cloud.autoconfigure: trace
    org.geoserver.cloud.config.factory: trace
    # bus debugging
    org.geoserver.cloud.bus: trace
    org.springframework.cloud.bus: debug
    org.springframework.cloud.bus.BusAutoConfiguration: info
    org.springframework.cloud.bus.DefaultBusPathMatcher: info
    # reactivefeign:
    reactivefeign.client.log: info
